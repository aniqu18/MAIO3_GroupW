name: CI - Lint, Train, Test, Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  train-model:
    name: Train and Evaluate Model
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Train model
        run: |
          echo "Training model..."
          python train/train.py

      - name: Verify artifacts
        run: |
          test -f app/artifacts/model.pkl || (echo "ERROR: model.pkl not found!" && exit 1)
          test -f app/artifacts/metrics.json || (echo "ERROR: metrics.json not found!" && exit 1)
          echo "✓ Artifacts verified"
          echo "Model size: $(du -h app/artifacts/model.pkl | cut -f1)"
          echo "Metrics:"
          cat app/artifacts/metrics.json

      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: app/artifacts/model.pkl
          retention-days: 30

      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: app/artifacts/metrics.json
          retention-days: 90

  test-api:
    name: Test FastAPI
    runs-on: ubuntu-latest
    needs: train-model

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: app/artifacts/

      - name: Verify model presence
        run: ls -lh app/artifacts/model.pkl

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest requests

      - name: Start FastAPI in background
        run: |
          nohup uvicorn app.api:app --host 0.0.0.0 --port 8000 &
          echo "Waiting for API to start..."
          for i in {1..20}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "✓ API is ready"
              break
            fi
            sleep 2
          done

      - name: Run API tests
        run: pytest test/tests_api.py -v --tb=short

      - name: Manual endpoint test
        run: |
          echo "Testing health and predict endpoints..."
          curl -f http://localhost:8000/health
          curl -X POST http://localhost:8000/predict \
            -H "Content-Type: application/json" \
            -d '{"features":[0.05,0.05,0.02,0.01,-0.03,-0.04,-0.04,-0.02,0.01,0.02]}' \
            -f

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: train-model

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: app/artifacts/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: diabetes-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: List Docker images
        run: docker images

      - name: Run container smoke test
        run: |
          docker run -d -p 8000:8000 --name test-container diabetes-api:test
          echo "Waiting for container..."
          sleep 10
          curl -f http://localhost:8000/health
          curl -X POST http://localhost:8000/predict \
            -H "Content-Type: application/json" \
            -d '{"features":[0.05,0.05,0.02,0.01,-0.03,-0.04,-0.04,-0.02,0.01,0.02]}' \
            -f
          echo "✓ Container test passed"
          docker stop test-container
          docker rm test-container
